
void bfs(int row , int col , vector<vector<int>>&vis , vector<vector<char>> &grid)
{
   vis[row][col]=1;
   queue<pair<row,col>>q;
   q.push({row,col});
   int n=grid.size();
   int m=grid[0].size();
   while(!q.empty())
   {
       int row=q.front().first();
       int col=q.front().second();
       q.pop();
       //traverse in the neighbours and mark it as a land
       for(int newrow=-1;newrow<=1;newrow++)
       {
           for(int newcol=-1;newcol<=1;newcol++)
           {
               int nrow=row+newrow;
               int ncol=col+newcol;
               if(!vis[nrow][ncol] && grid[nrow][ncol]=='1' && nrow>=0 && nrow<n && ncol>=0 && ncol<m )
               {
                   vis[nrow][ncol]=1;
                   q.push({nrow,ncol});
               }
           }
       }
   }
}

int numislands(vector<vector<char>> &grid)
{
    int n=grid.size();
    int m=grid[0].size();
    int cnt=0;
    vector<vector<int>> vis(n , vector<int>(m,0) );
    for(int row=0;row<n;row++)
    {
       for(int col=0;col<n;col++ )
       {
           if(!vis[row][col] && grid[row][col]==1)
           {
               cnt++;
               bfs(row , col , vis , grid);
           }
       }
    }
    return cnt;
}
