class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        vector<vector<bool>>visited(grid.size(),vector<bool>(grid[0].size(),false));
        queue<pair<pair<int,int>,int>> q;  // {{i,j},time}
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[i].size(); j++){
                if(!visited[i][j] && grid[i][j]==2){
                    q.push({{i,j},0});
                    visited[i][j]=true;
                }
            }
        }
        int max_time=0;
        while(!q.empty()){
            pair<pair<int,int>,int> orange = q.front();
            int i = orange.first.first;
            int j = orange.first.second;
            int time = orange.second;
            max_time = max(max_time,time);
            grid[i][j]=2;
            if(i!=0 && !visited[i-1][j] && grid[i-1][j]==1){
                visited[i-1][j]=true;
                q.push({{i-1,j},time+1});
            }
            if(i!=grid.size()-1 && !visited[i+1][j] && grid[i+1][j]==1){
                visited[i+1][j]=true;
                q.push({{i+1,j},time+1});
            }
            if(j!=0 && !visited[i][j-1] && grid[i][j-1]==1){
                visited[i][j-1]=true;
                q.push({{i,j-1},time+1});
            }
            if(j!=grid[0].size()-1 && !visited[i][j+1] && grid[i][j+1]==1){
                visited[i][j+1]=true;
                q.push({{i,j+1},time+1});
            }
            q.pop();
        }
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[i].size(); j++){
                if(grid[i][j]==1)return -1;
            }
        }
        return max_time;
    }
};
