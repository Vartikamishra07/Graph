class Solution 
{
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prereq) 
    {
        int n=numCourses;
        vector<int>adj[n];
       for(auto it:prereq)
       {
           adj[it[1]].push_back(it[0]);
       }
       int indegree[n];
       for(int i=0;i<n;i++)
       {
           indegree[i]=0;
       }
    for(int i=0;i<n;i++)
    {
        for(auto it:adj[i])
        {
            indegree[it]++;
        } 
    }
    queue<int>q;
    for(int i=0;i<n;i++)
    {
        if(indegree[i]==0)
        {
            q.push(i);
        }
    }
    vector<int>topo;
    while(!q.empty())
    {
        int node=q.front();
        q.pop();
        topo.push_back(node);
        for(auto it:adj[node])
        {
            indegree[it]--;
            if(indegree[it]==0)
            {
                q.push(it);
            }
        }
    }
    if(topo.size()==n) return topo; // no cycle since whole topological sort has been printed
    return {} ;  // cycle detected since incomplete cycle is present
    }
};
