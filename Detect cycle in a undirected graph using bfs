class Solution 
{
public:
    void bfs(int src , vector<int> &adjList[] , vector<int> &visited[])
    {
        visited[src]=1;
        queue<pair<int , int>> q;
        q.push({src,-1});
        while(!q.empty())
        {
            int node=q.front().first;
            int parent=q.front().second();
            q.pop();
            for(auto adjacentnode:adj[node])
            {
                if(!visited[adjacentnode])
                {
                    visited[adjacentnode]=1;
                    q.push({adjacentnode , node});
                }
                else if(adjacentnode != parent)
                {
                    return true;
                }
            }
        }
        return false;
    }

    bool isCycle(int V , vector<int>adjList)
    {
        int visited[V]={0};
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                if(bfs(i , adjList , visited)){
                    return  true;
                }
            }
        }
        return false;
    }
};
